name: 🐳 Build & deploy Docker images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - service: frontend
            dockerfile: frontend.Dockerfile
            image: ghcr.io/${{ github.repository }}/mnist-frontend
          - service: backend
            dockerfile: backend.Dockerfile
            image: ghcr.io/${{ github.repository }}/mnist-backend

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      matrix:
        include:
          - service: frontend
            image: ghcr.io/${{ github.repository }}/mnist-frontend
          - service: backend
            image: ghcr.io/${{ github.repository }}/mnist-backend

    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🔄 Mise à jour docker-compose.staging.yml avec les nouvelles images"
          
          # Remplacer les tags dans docker-compose.staging.yml
          sed -i "s|ghcr.io/${{ github.repository }}/mnist-frontend:.*|ghcr.io/${{ github.repository }}/mnist-frontend:develop|g" docker-compose.staging.yml || true
          sed -i "s|ghcr.io/${{ github.repository }}/mnist-backend:.*|ghcr.io/${{ github.repository }}/mnist-backend:develop|g" docker-compose.staging.yml || true
          
          echo "✅ Images staging mises à jour"
          echo "🌐 Staging URL: https://staging.votre-domaine.com"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🚀 Deploy to production
        run: |
          echo "🎯 Déploiement en production version ${{ steps.version.outputs.version }}"
          
          # Exemple de déploiement (à adapter selon votre infrastructure)
          echo "📦 Images déployées:"
          echo "  Frontend: ghcr.io/${{ github.repository }}/mnist-frontend:${{ steps.version.outputs.version }}"
          echo "  Backend:  ghcr.io/${{ github.repository }}/mnist-backend:${{ steps.version.outputs.version }}"
          
          # Ici vous pouvez ajouter vos commandes de déploiement :
          # - SSH vers serveur de production
          # - kubectl apply pour Kubernetes  
          # - docker-compose up avec les nouvelles images
          # - Webhook vers service de déploiement
          
          echo "✅ Déploiement production terminé"
          echo "🌐 Production URL: https://votre-domaine.com"

      - name: 📢 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          body: |
            🚀 **Nouvelle version déployée en production !**
            
            ## 📦 Images Docker
            
            - **Frontend**: `ghcr.io/${{ github.repository }}/mnist-frontend:${{ steps.version.outputs.version }}`
            - **Backend**: `ghcr.io/${{ github.repository }}/mnist-backend:${{ steps.version.outputs.version }}`
            
            ## 🐳 Déploiement rapide
            
            ```bash
            # Télécharger les images
            docker pull ghcr.io/${{ github.repository }}/mnist-frontend:${{ steps.version.outputs.version }}
            docker pull ghcr.io/${{ github.repository }}/mnist-backend:${{ steps.version.outputs.version }}
            
            # Ou utiliser docker-compose avec les nouvelles images
            export VERSION=${{ steps.version.outputs.version }}
            docker-compose -f docker-compose.prod.yml up -d
            ```

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    
    steps:
      - name: 🧹 Cleanup old images
        run: |
          echo "🗑️ Nettoyage des anciennes images Docker"
          # Garde les 10 dernières versions seulement
          echo "Les images plus anciennes peuvent être supprimées manuellement du registry" 